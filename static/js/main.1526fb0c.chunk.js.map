{"version":3,"sources":["../../src/editor.styles.ts","../../src/toolbar-controls/btn.component.tsx","../../src/editor.data.tsx","../../src/toolbar-controls/select.component.tsx","../../src/toolbar-controls/blockStyling.component.tsx","../../src/toolbar-controls/inlineStyling.component.tsx","../../src/editorToolbar.component.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["useGtxEditorStyles","makeStyles","spacing","transitions","palette","root","EditorContainer","position","border","grey","borderRadius","transition","easing","duration","leavingScreen","boxSizing","dark","color","editorLabel","background","transform","top","left","padding","margin","fontSize","secondary","toolbar","display","toolbarControl","editor","height","maxHeight","overflow","flexColumn","flexDirection","flexColumnCenterChilds","alignItems","error","borderBottom","hidePlaceholder","ToolbarBtn","active","label","valueToChoose","icon","onClickBtn","classes","btnColor","className","variant","startIcon","onClick","inlineStyleControls","bold","name","style","React","type","italic","underline","strikethrough","highlight","textBlockTypeControlsData","H1","H2","H3","H4","H5","H6","extraBlockTypeControlsData","bulletList","numberList","quote","code","SelectControl","currentBlockType","onChange","options","size","id","labelId","value","e","MenuProps","elevation","key","o","txtBlockControlsOptions","Object","x","BlockStyleControls","editorState","toggleBlockType","selection","blockType","controlData","InlineStyleControls","toggleInlineStyle","currentStyle","EditorToolbar","props","field","setFieldValue","form","placeholder","customClasses","defaultClasses","nEditorState","gutterBottom","inlineStyle","RichUtils","useAppStyles","theme","width","formWrapper","flexGrow","editorField","confirmZone","marginTop","formData","productEditor","EditorState","createEmpty","App","Typography","initialValues","onSubmit","autoComplete","component","MaterialEditor","Button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1526fb0c.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles'\nimport grey from '@material-ui/core/colors/grey'\n\nexport const useGtxEditorStyles = makeStyles(\n  ({ spacing, transitions, palette }) => ({\n    root: {},\n    EditorContainer: {\n      position: 'relative',\n      border: `1px solid ${grey[300]}`,\n      borderRadius: 5,\n      transition: transitions.create(['border-color', 'height'], {\n        easing: transitions.easing.sharp,\n        duration: transitions.duration.leavingScreen\n      }),\n      boxSizing: 'border-box',\n      '&:hover': {\n        border: '1px solid rgba(0, 0, 0, 0.87)'\n      },\n      '&:focus-within': {\n        border: `2px solid ${palette.primary.dark}`\n      },\n      '&:focus-within $editorLabel': {\n        color: palette.primary.dark\n      }\n    },\n    editorLabel: {\n      position: 'absolute',\n      background: 'white',\n      transform: 'translateY(-50%)',\n      top: 0,\n      left: '8px',\n      padding: '0 0.3rem',\n      margin: '0 0.5rem',\n      fontSize: '12px',\n      color: palette.text.secondary\n    },\n    toolbar: {\n      display: 'flex',\n      padding: spacing(2, 1)\n    },\n    toolbarControl: {\n      margin: spacing(0, 0.5)\n    },\n    editor: {\n      padding: '0px 14px',\n      height: '200px',\n      maxHeight: '200px',\n      overflow: 'auto'\n    },\n    flexColumn: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    flexColumnCenterChilds: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    error: {\n      borderBottom: '2px solid red'\n    },\n    hidePlaceholder: {\n      display: 'none'\n    }\n  })\n)\n","import React from 'react'\nimport { Button, IconButton } from '@material-ui/core'\nimport { EditorStyles } from '../models'\n\ninterface ToolbarBtnProps {\n  active: boolean\n  label?: string\n  onClickBtn: (chosenVal: string) => void\n  valueToChoose: string\n  icon: React.ReactNode\n  classes: EditorStyles\n}\n\nexport const ToolbarBtn: React.FC<ToolbarBtnProps> = ({\n  active,\n  label,\n  valueToChoose,\n  icon,\n  onClickBtn,\n  classes\n}) => {\n  const btnColor = active ? 'primary' : 'default'\n  if (label) {\n    return (\n      <Button\n        className={classes.toolbarControl}\n        variant='outlined'\n        startIcon={icon}\n        onClick={() => onClickBtn(valueToChoose)}\n        color={btnColor}\n      >\n        {label}\n      </Button>\n    )\n  } else {\n    return (\n      <IconButton\n        className={classes.toolbarControl}\n        aria-label='toolbarBtn'\n        onClick={() => onClickBtn(valueToChoose)}\n        color={btnColor}\n      >\n        {icon}\n      </IconButton>\n    )\n  }\n}\n","import React from 'react'\nimport FormatBoldIcon from '@material-ui/icons/FormatBold'\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic'\nimport FormatUnderlinedIcon from '@material-ui/icons/FormatUnderlined'\nimport StrikethroughIcon from '@material-ui/icons/StrikethroughS'\nimport HighlightIcon from '@material-ui/icons/Highlight'\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered'\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted'\nimport FormatQuoteIcon from '@material-ui/icons/FormatQuote'\nimport CodeIcon from '@material-ui/icons/Code'\nimport { ControlsNames, GTXEditorControlData } from './models'\n\nexport const getControlDataByName = (\n  controlName: ControlsNames\n): GTXEditorControlData | undefined => {\n  return allControls[controlName]\n}\n\nexport const getInlineControlsData = (): GTXEditorControlData[] => {\n  return Object.values(inlineStyleControls) as GTXEditorControlData[]\n}\n\nexport const getTxtBlockControlsData = (): GTXEditorControlData[] => {\n  return Object!.values(textBlockTypeControlsData) as GTXEditorControlData[]\n}\n\nexport const getExtraBlockControlsData = (): GTXEditorControlData[] => {\n  return Object.values(extraBlockTypeControlsData) as GTXEditorControlData[]\n}\n\nconst inlineStyleControls: Partial<\n  Record<ControlsNames, GTXEditorControlData>\n> = {\n  bold: {\n    label: 'Bold',\n    name: 'bold',\n    style: 'BOLD',\n    icon: <FormatBoldIcon />,\n    type: 'inline'\n  },\n  italic: {\n    label: 'Italic',\n    name: 'italic',\n    style: 'ITALIC',\n    icon: <FormatItalicIcon />,\n    type: 'inline'\n  },\n  underline: {\n    label: 'Underline',\n    name: 'underline',\n    style: 'UNDERLINE',\n    icon: <FormatUnderlinedIcon />,\n    type: 'inline'\n  },\n  strikethrough: {\n    label: 'Strikethrough',\n    name: 'strikethrough',\n    style: 'STRIKETHROUGH',\n    icon: <StrikethroughIcon />,\n    type: 'inline'\n  },\n  highlight: {\n    label: 'Highlight',\n    name: 'highlight',\n    style: 'HIGHLIGHT',\n    icon: <HighlightIcon />,\n    type: 'inline'\n  }\n}\n\nconst textBlockTypeControlsData: Partial<\n  Record<ControlsNames, GTXEditorControlData>\n> = {\n  H1: {\n    label: 'H1',\n    name: 'H1',\n    style: 'header-one',\n    type: 'block'\n  },\n  H2: {\n    label: 'H2',\n    name: 'H2',\n    style: 'header-two',\n    type: 'block'\n  },\n  H3: {\n    label: 'H3',\n    name: 'H3',\n    style: 'header-three',\n    type: 'block'\n  },\n  H4: {\n    label: 'H4',\n    name: 'H4',\n    style: 'header-four',\n    type: 'block'\n  },\n  H5: {\n    label: 'H5',\n    name: 'H5',\n    style: 'header-five',\n    type: 'block'\n  },\n  H6: {\n    label: 'H6',\n    name: 'H6',\n    style: 'header-six',\n    type: 'block'\n  }\n}\n\nconst extraBlockTypeControlsData: Partial<\n  Record<ControlsNames, GTXEditorControlData>\n> = {\n  bulletList: {\n    label: 'UL',\n    name: 'bulletList',\n    style: 'unordered-list-item',\n    icon: <FormatListBulletedIcon />,\n    type: 'block'\n  },\n  numberList: {\n    label: 'OL',\n    name: 'numberList',\n    style: 'ordered-list-item',\n    icon: <FormatListNumberedIcon />,\n    type: 'block'\n  },\n  quote: {\n    label: 'Blockquote',\n    name: 'quote',\n    style: 'blockquote',\n    icon: <FormatQuoteIcon />,\n    type: 'block'\n  },\n  code: {\n    label: 'Code Block',\n    name: 'code',\n    style: 'code-block',\n    icon: <CodeIcon />,\n    type: 'block'\n  }\n}\n\nconst allControls = {\n  ...inlineStyleControls,\n  ...textBlockTypeControlsData,\n  ...extraBlockTypeControlsData\n}\n\n// import TitleIcon from \"@material-ui/icons/Title\";\n// import InsertLinkIcon from \"@material-ui/icons/InsertLink\";\n// import PhotoLibraryIcon from \"@material-ui/icons/PhotoLibrary\";\n// import FormatClearIcon from \"@material-ui/icons/FormatClear\";\n// import SaveIcon from \"@material-ui/icons/Save\";\n// import UndoIcon from \"@material-ui/icons/Undo\";\n// import RedoIcon from \"@material-ui/icons/Redo\";\n/*\n{\n  undo: {\n    label: \"Undo\",\n    name: \"undo\",\n    style: \"UNDO\",\n    icon: <UndoIcon />,\n    type: \"callback\"\n  },\n  redo: {\n    label: \"Redo\",\n    name: \"redo\",\n    style: \"REDO\",\n    icon: <RedoIcon />,\n    type: \"callback\"\n  },\n  link: {\n    label: \"Link\",\n    name: \"link\",\n    style: \"LINK\",\n    icon: <InsertLinkIcon />,\n    type: \"callback\",\n    id: \"link-control\"\n  },\n  media: {\n    label: \"Media\",\n    name: \"media\",\n    style: \"IMAGE\",\n    icon: <PhotoLibraryIcon />,\n    type: \"callback\",\n    id: \"media-control\"\n  },\n  clear: {\n    label: \"Clear\",\n    name: \"clear\",\n    style: \"clear\",\n    icon: <FormatClearIcon />,\n    type: \"callback\"\n  },\n  save: {\n    label: \"Save\",\n    name: \"save\",\n    style: \"save\",\n    icon: <SaveIcon />,\n    type: \"callback\"\n  }\n};\n\n\n*/\n","import React from 'react'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport { EditorStyles } from '../models'\n\ninterface ISelectControl {\n  currentBlockType: string\n  onChange: (chosenVal: string) => void\n  options: { label: string; value: string }[]\n  classes: EditorStyles\n  label: string\n}\n\nexport const SelectControl: React.FC<ISelectControl> = ({\n  label,\n  currentBlockType,\n  onChange,\n  options,\n  classes\n}) => {\n  return (\n    <FormControl\n      size='small'\n      variant='outlined'\n      className={classes.toolbarControl}\n    >\n      <InputLabel id={label}>{label}</InputLabel>\n      <Select\n        labelId={label}\n        name={label}\n        value={currentBlockType}\n        onChange={(e) => onChange(e.target.value as string)}\n        label={label}\n        MenuProps={{ elevation: 1 }}\n      >\n        {options.map((o) => (\n          <MenuItem key={o.value} value={o.value}>\n            {o.label}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n","import React from 'react'\nimport { ToolbarBtn } from './btn.component'\nimport {\n  getExtraBlockControlsData,\n  getTxtBlockControlsData\n} from '../editor.data'\nimport { SelectControl } from './select.component'\nimport { EditorToolbarProps } from '../models'\n\nconst txtBlockControlsOptions = [\n  {\n    label: 'Normal',\n    value: 'unstyled'\n  },\n  ...getTxtBlockControlsData().map((x) => ({ label: x.label, value: x.style }))\n]\n\nexport const BlockStyleControls: React.FC<EditorToolbarProps> = ({\n  editorState,\n  toggleBlockType,\n  classes\n}) => {\n  const selection = editorState.getSelection()\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType()\n\n  return (\n    <React.Fragment>\n      <SelectControl\n        currentBlockType={blockType}\n        onChange={toggleBlockType}\n        options={txtBlockControlsOptions}\n        classes={classes}\n        label='Title'\n      />\n      {getExtraBlockControlsData().map((controlData) => (\n        <ToolbarBtn\n          key={controlData.label}\n          active={controlData.style === blockType}\n          onClickBtn={toggleBlockType}\n          valueToChoose={controlData.style}\n          icon={controlData.icon}\n          classes={classes}\n        />\n      ))}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { ToolbarBtn } from './btn.component'\nimport { getInlineControlsData } from '../editor.data'\nimport { EditorToolbarProps } from '../models'\n\nexport const InlineStyleControls: React.FC<EditorToolbarProps> = ({\n  editorState,\n  toggleInlineStyle,\n  classes\n}) => {\n  const currentStyle = editorState.getCurrentInlineStyle()\n  return (\n    <React.Fragment>\n      {getInlineControlsData().map((controlData) => (\n        <ToolbarBtn\n          key={controlData.label}\n          active={currentStyle.has(controlData.style)}\n          onClickBtn={toggleInlineStyle}\n          valueToChoose={controlData.style}\n          icon={controlData.icon}\n          classes={classes}\n        />\n      ))}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { EditorToolbarProps } from './models'\nimport { BlockStyleControls } from './toolbar-controls/blockStyling.component'\nimport { InlineStyleControls } from './toolbar-controls/inlineStyling.component'\n\nexport const EditorToolbar: React.FC<EditorToolbarProps> = (props) => {\n  return (\n    <React.Fragment>\n      <InlineStyleControls {...props} />\n      <BlockStyleControls {...props} />\n    </React.Fragment>\n  )\n}\n","import * as React from 'react'\nimport { useGtxEditorStyles } from './editor.styles'\nimport 'draft-js/dist/Draft.css'\nimport { Editor, EditorState, RichUtils } from 'draft-js'\nimport { Typography } from '@material-ui/core'\nimport { EditorToolbar } from './editorToolbar.component'\nimport { EditorProps } from './models'\n\nexport default function MaterialEditor(props: EditorProps) {\n  const {\n    field,\n    form: { setFieldValue },\n    editorLabel,\n    placeholder,\n    customClasses\n  } = props\n  const defaultClasses = useGtxEditorStyles()\n  const classes = customClasses || defaultClasses\n  //   const fieldError = getIn(errors, field.name);\n  //   const showError = getIn(touched, field.name) && !!fieldError;\n  const editorState = field.value\n  const toggleInlineStyle = (inlineStyle: string) => {\n    onChange(RichUtils.toggleInlineStyle(editorState, inlineStyle))\n  }\n  const toggleBlockType = (blockType: string) => {\n    onChange(RichUtils.toggleBlockType(editorState, blockType))\n  }\n  const onChange = (nEditorState: EditorState) => {\n    setFieldValue(field.name, nEditorState)\n  }\n  return (\n    <div className={classes.EditorContainer}>\n      <Typography\n        className={classes.editorLabel}\n        variant='caption'\n        gutterBottom\n      >\n        {editorLabel}\n      </Typography>\n      <div className={classes.toolbar}>\n        <EditorToolbar\n          editorState={editorState}\n          toggleInlineStyle={toggleInlineStyle}\n          toggleBlockType={toggleBlockType}\n          classes={classes}\n        />\n      </div>\n      <div className={classes.editor}>\n        <Editor\n          editorState={editorState}\n          onChange={(nEditorState) => setFieldValue(field.name, nEditorState)}\n          placeholder={placeholder}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Button, makeStyles, Typography } from '@material-ui/core'\nimport { EditorState } from 'draft-js'\nimport { Field, Form, Formik } from 'formik'\nimport CheckIcon from '@material-ui/icons/Check'\nimport MaterialEditor from 'react-material-editor'\n\nexport const useAppStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  formWrapper: {\n    flexGrow: 1\n  },\n  form: {\n    margin: theme.spacing(2)\n  },\n  editorField: {},\n  confirmZone: {\n    marginTop: theme.spacing(2)\n  }\n}))\n\nconst formData = {\n  productEditor: EditorState.createEmpty()\n}\n\nfunction App() {\n  const classes = useAppStyles()\n  return (\n    <div className={classes.root}>\n      <Typography variant='h4'>Material-UI Editor + Formik + Yup</Typography>\n      <div className={classes.formWrapper}>\n        <Formik initialValues={formData} onSubmit={() => {}}>\n          <Form className={classes.form} autoComplete='off'>\n            <Field\n              className={classes.editorField}\n              component={MaterialEditor}\n              name='productEditor'\n              editorLabel='GTX Editor'\n              placeholder='Enter Infos'\n            />\n            <div className={classes.confirmZone}>\n              <Button\n                variant='outlined'\n                color='primary'\n                startIcon={<CheckIcon />}\n              >\n                Confirm\n              </Button>\n            </div>\n          </Form>\n        </Formik>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}